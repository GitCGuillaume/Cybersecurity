//how T work
//The prover (e.g., token, soft token) and verifier (authentication
//or validation server) MUST know or be able to derive the current
//Unix time

// T:
//X represents the time step in seconds (default value X =
//30 seconds) and is a system parameter.
//o  T0 is the Unix time to start counting time steps (default value is
  // 0, i.e., the Unix epoch) and is also a system parameter.
//X 30 secs (in unix time type)
//T0 initial  counter
//T0 < Cur Unix Time
//T = (Current Unix time - T0) / X

//How K part in TOTP work
// K:

// R5 - There MUST be user-friendly mechanisms available to
//resynchronize the counter.  Section 7.4 and Appendix E.4 details the
//resynchronization mechanism proposed in this document
//TOTP(K,T)
//HOTP(K,T) = Truncate(HMAC-SHA-1(K,T))
//T: at least u64
//R3: The algorithm MUST use HOTP [RFC4226] as a key building block.
//Do something with T
//call hmac-sha-1 type crypt with K secret
//must generate 6 digits code

//The Key (K), the Counter (C), and Data values are hashed high-order
//byte first. (because network communication work like this)

//The HOTP values generated by the HOTP generator are treated as big
//endian.
//ft totp
//ft truncate